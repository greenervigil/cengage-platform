'use strict';

var href = require('./href'),
    urlUtil = require('url'),
    sessionCookieName = 'cengage-session-id',
    ssoTokenHeaderName = 'sso-token',
    ssoUserHeaderName = 'sso-user',
    sessions = {},
    uuid = require('uuid');

function ssoOlrMiddlewareGenerator(ssoClient) {
    function authenticated(req, res, next, failure) {
        var sessionId;
        if (!req.cookies || !req.cookies[sessionCookieName]) {
            sessionId = uuid.v4();
            res.cookie(sessionCookieName, uuid.v4(), { path: '/' });
        } else {
            sessionId = req.cookies[sessionCookieName];
        }

        var session = sessions[sessionId];

        if(!session) {
            session = sessions[sessionId] = {
                headers: {}
            };
        }

        var ssoToken = session.headers.ssoToken;

        if (!ssoToken || isExpired(ssoToken)) {
            if(req.query.token) {
                ssoClient.getUser(req.query.token, function(err, body) {
                    if(err) {
                        failure();
                    } else {
                        addHeader(session, ssoTokenHeaderName, req.query.token, 30);
                        addHeader(session, ssoUserHeaderName, JSON.stringify(body));
                        injectHeaders(req, session);
                        next();
                    }
                });
            } else {
                failure();
            }
        } else {
            injectHeaders(req, session);
        }
    }

    function injectHeaders(req, session) {
        for(var key in session.headers) {
            if(!isExpired(session.headers[key])) {
                req.headers[key] = session.headers[key].value;
            }
        }
    }

    function isExpired(header) {
        if(header.ttl && ((new Date().getTime() - header.timestamp) / 1000) > header.ttl) {
            return true;
        }
        return false;
    }

    function addHeader(session, name, value, ttl) {
        session.headers[name] = {
            value: value,
            timestamp: new Date().getTime(),
            ttl: ttl
        };
    }

    return function ssoOlrMiddlewareRouteGenerator(routes, loginUrl) {
        routes.allow = routes.allow || [];
        routes.redirect = routes.redirect || [];
        routes.restrict = routes.restrict || [];

        return function ssoOlrMiddleware(req, res, next) {
            var url = urlUtil.parse(req.url);
            if (routes.restrict.indexOf(url.pathname) >= 0) {
                authenticated(req, res, next, function failure() {
                    res.status(401).end();
                });
            } else if (routes.redirect.indexOf(url.pathname) >= 0) {
                authenticated(req, res, next, function failure() {
                    res.redirect(loginUrl + '?targetUrl=' + href(req));
                });
            } else {
                next();
            }
        };
    };
}

module.exports = ssoOlrMiddlewareGenerator;
