'use strict';

var expect = require('chai').expect,
    ssoOlr = require('../index'),
    request = require('request'),
    express = require('express'),
    app = express(),
    port = 9090,
    sessionCookieName = 'cengage-session-id',
    ssoTokenHeaderName = 'sso-token',
    ssoUserHeaderName = 'sso-user',
    endpoint = 'http://localhost:'+port;

describe('middleware', function () {

    var client,
        headers,
        loginUrl = 'https://s-login.cengagebrain.com/cb/login.htm',
        username = '4ltrStudent2@cengage.com',
        password = 'T3sting',
        invalidToken = 'afdasfads',
        token;

    function serverRequest(url, callback) {
        request({
            url: url,
            followRedirect: false
        }, callback);
    }

    before(function (done) {
        client = ssoOlr('http://s-ws-i.cengage.com');

        app.use(client.middleware({
            allow: ['/service/a'],
            restrict: ['/service/b'],
            redirect: ['/']
        }, loginUrl));

        app.use(function(req, res) {
            headers = req.headers;
            res.status(200).end();
        });

        token = client.getToken(username, password, function(err, response) {
            if(!err) {
                token = response.token;

                app.listen(port, function() {
                    done();
                });
            }
        });
    });

    beforeEach(function() {
        headers = undefined;
    });

    describe('no token', function() {
        it('should allow access when an "allow" route is called', function(done) {
            serverRequest(endpoint+'/service/a', function(err, response) {
                expect(response.statusCode).to.equal(200);
                done();
            });
        });

        it('should return a 401 when a "restrict" route is called', function(done) {
            serverRequest(endpoint+'/service/b', function(err, response) {
                expect(response.statusCode).to.equal(401);
                done();
            });
        });

        it('should redirect to login URL when a "redirect" route is called', function(done) {
            var url = endpoint+'/';
            serverRequest(url, function(err, response) {
                expect(response.statusCode).to.equal(302);
                expect(response.headers.location).to.equal(loginUrl+'?targetUrl='+url);
                done();
            });
        });
    });

    describe('token', function() {
        it('should allow access when a valid token is present', function(done) {
            serverRequest(endpoint+'/?token='+token, function(err, response) {
                expect(response.statusCode).to.equal(200);
                expect(headers[ssoTokenHeaderName]).to.exist;
                expect(headers[ssoUserHeaderName]).to.exist;
                done();
            });
        });

        it('should reject an invalid token', function(done) {
            var url = endpoint+'/?token='+invalidToken;
            serverRequest(url, function(err, response) {
                expect(response.headers['set-cookie'][0]).to.contain(sessionCookieName);
                expect(response.statusCode).to.equal(302);
                expect(response.headers.location).to.equal(loginUrl+'?targetUrl='+url);
                done();
            });
        });
    });
});
