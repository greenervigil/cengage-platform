#!/bin/bash
params="$(getopt -o hv: -l help,version: --name "$0" -- "$@")"
eval set -- "$params"

BRANCH_NAME=$(echo ${GIT_BRANCH} | cut -d'/' -f 2-)
JENKINS_USER="Jenkins2Stash"
REPO_PATH=$(git config remote.origin.url | cut -d@ -f2 | cut -d/ -f2- | cut -d/ -f2- | cut -d/ -f2-| cut -d? -f1)

VERSION="build"
VERSION_BUMP=false
HELP=false
IS_SERVICE=false
IS_ROUTER=false
IS_NIGHTS_WATCH=false

if [ $REPO_PATH == "scm/cmp/node-cmp.git" ]
then
  IS_SERVICE=true
fi

if [ $REPO_PATH == "scm/cmp/node-cmp-router.git" ]
then
  IS_ROUTER=true
fi

if [ $REPO_PATH == "scm/cmp/nights-watch.git" ]
then
  IS_NIGHTS_WATCH=true
fi

while [[ $# -gt 0 ]] ; do
  case $1 in
    -h|-\?|--help)
      HELP=true
      ;;
    -v|--version)
      if [ -n "$2" ]; then
        VERSION="$2"
        VERSION_BUMP=true
        shift
      fi
      ;;
  esac
  shift
done

init() {
  if [ $HELP = true ]
  then
    show_help
  else
    npmInstall
    lint

    # Exempt from testing due to OS requirements not being met on Jenkins
    if [ $REPO_PATH != "scm/cmp/cmp-plugin-track-device.git" ]
    then
      test
    fi
    
    todos

    if [ $VERSION_BUMP = true ]
    then

      if [ $VERSION != "build" ]
      then
        incrementVersion ${VERSION}
        configureGit

        if [ $IS_SERVICE = true ]
        then
          generateReadme
          commitChanges
          publishToNexus
        fi

        if [ $IS_ROUTER = true ] || [ $IS_NIGHTS_WATCH = true ]
        then
          publishToNexus
        fi

        pushChanges
      fi

      if [ $IS_ROUTER = false ] && [ $IS_NIGHTS_WATCH = false ]
      then
        buildToAG
      fi
    fi
  fi
}

buildToAG() {
  grunt jenkins --force
  RET_CODE=$?
  if [ ${RET_CODE} -gt 0 ]
  then
    exitWithError "Build to AG" ${RET_CODE}
  fi
}

publishToNexus() {
  npm publish
  RET_CODE=$?
  if [ ${RET_CODE} -gt 0 ]
  then
    exitWithError "Publish to Nexus" ${RET_CODE}
  fi
}

configureGit() {
  git remote set-url origin "http://${JENKINS_USER}:${JENKINS2STASH}@stash.corp.web:7990/${REPO_PATH}"
  git checkout HEAD
}

commitChanges() {
  git commit -a -m "${VERSION}"
  RET_CODE=$?
  if [ ${RET_CODE} -gt 0 ]
  then
    exitWithError "Commit Changes" ${RET_CODE}
  fi
}

exitWithError() {
  echo "${1} failed with error code: ${2}"
  exit ${2}
}

generateReadme() {
  npm run generate:readme
  RET_CODE=$?
  if [ ${RET_CODE} -gt 0 ]
  then
    exitWithError "README Generation" ${RET_CODE}
  fi
}

incrementVersion() {
  npm version ${1}
  RET_CODE=$?
  if [ ${RET_CODE} -gt 0 ]
  then
    exitWithError "Increment Version" ${RET_CODE}
  fi
}

lint() {
  show_step_banner "Lint"
  npm run lint
  RET_CODE=$?
  if [ ${RET_CODE} -gt 0 ]
  then
    exitWithError "Lint" ${RET_CODE}
  fi
}

npmInstall() {
  show_step_banner "NPM Install"
  echo "Node version: $(node --version)"
  echo "NPM version: $(npm --version)"
  npm_config_tmp=./tmp/ npm install --registry "http://nexus.mindtap.corp.web/content/groups/npm.group/"
  npm_config_tmp=./tmp/ npm install --registry "http://nexus.mindtap.corp.web/content/groups/npm.group/"
  RET_CODE=$?
  if [ ${RET_CODE} -gt 0 ]
  then
    exitWithError "NPM Install" ${RET_CODE}
  fi
}

pushChanges() {
  git push origin HEAD:${BRANCH_NAME} && git push --tags
  RET_CODE=$?
  if [ ${RET_CODE} -gt 0 ]
  then
    exitWithError "Push Changes & Tags" ${RET_CODE}
  fi
}

show_help() {
  echo ""
  echo "usage: ./build.sh -b develop"
  echo "Script to tie in together all of the various commands necessary to deploy a project"
  echo ""
  echo "-v|--version       Version to increment (patch, minor, major), (default: patch)"
  echo "-h|--help          View this help documentation"
  echo ""
}

show_step_banner() {
  echo ""
  echo "---------------------------------------------------"
  echo "    Running ${1}                                   "
  echo "---------------------------------------------------"
  echo ""
}

test() {
  show_step_banner "Tests"
  npm run test
  RET_CODE=$?
  if [ ${RET_CODE} -gt 0 ]
  then
    exitWithError "Unit Tests" ${RET_CODE}
  fi
}

todos() {
  show_step_banner "TODOs"
  npm run todo
  RET_CODE=$?
  if [ ${RET_CODE} -gt 0 ]
  then
    exitWithError "TODOs" ${RET_CODE}
  fi
}

init
