{
  "_args": [
    [
      {
        "raw": "/var/lib/jenkins/jobs/CMP-Plugin-Build-olr/workspace",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "/var/lib/jenkins/jobs/CMP-Plugin-Build-olr/workspace",
        "spec": "/var/lib/jenkins/jobs/CMP-Plugin-Build-olr/workspace",
        "type": "directory"
      },
      "/var/lib/jenkins/jobs/CMP-Plugin-Build-olr/workspace"
    ]
  ],
  "_from": "..",
  "_id": "cmp-plugin-olr@1.3.4",
  "_inCache": true,
  "_location": "/cmp-plugin-olr",
  "_phantomChildren": {},
  "_requested": {
    "raw": "/var/lib/jenkins/jobs/CMP-Plugin-Build-olr/workspace",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "/var/lib/jenkins/jobs/CMP-Plugin-Build-olr/workspace",
    "spec": "/var/lib/jenkins/jobs/CMP-Plugin-Build-olr/workspace",
    "type": "directory"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:..",
  "_shasum": "9a2458ea10ccc2fd58daa8b213a9468293e2481c",
  "_shrinkwrap": null,
  "_spec": "/var/lib/jenkins/jobs/CMP-Plugin-Build-olr/workspace",
  "_where": "/var/lib/jenkins/jobs/CMP-Plugin-Build-olr/workspace",
  "author": {
    "name": "Jason Smylnycky"
  },
  "dependencies": {
    "cmp-plugin-authentication": "git+http://stash.corp.web:7990/scm/cmp/cmp-plugin-authentication.git#release/1.3.x",
    "lodash": "^4.17.4",
    "sso-olr": "git+http://stash.corp.web:7990/scm/nm/sso-olr.git#0.1.0"
  },
  "description": "OLR for CMP",
  "devDependencies": {
    "artifact": "git+http://stash.corp.web:7990/scm/ag/node-client.git#0.6.2",
    "chai": "^4.1.1",
    "eslint": "^4.5.0",
    "eslint-config-standard": "^10.2.1",
    "eslint-plugin-promise": "^3.5.0",
    "eslint-plugin-standard": "^3.0.1",
    "grunt": "^1.0.1",
    "grunt-contrib-clean": "^1.1.0",
    "grunt-contrib-copy": "^1.0.0",
    "jit-grunt": "^0.10.0",
    "jsdoc": "^3.5.4",
    "leasot": "^4.10.0",
    "minami": "^1.2.3",
    "mocha": "^3.5.0",
    "nyc": "^11.1.0",
    "sinon": "^3.2.1"
  },
  "gitHead": "d3fc897242a8493b100babde8d8d2b04ace55325",
  "license": "ISC",
  "main": "index.js",
  "name": "cmp-plugin-olr",
  "optionalDependencies": {},
  "readme": "# OLR Plugin\n\nThe OLR plugin is the primary integration for connecting CMP sessions to the OLR service.  With it, you'll be able to secure URL paths as well as ensure the headers related to the session are passed along to your proxy endpoints every time.\n\nThis plugin is an extension of the [Authentication](http://stash.corp.web:7990/projects/CMP/repos/cmp-plugin-authentication/browse) plugin.\n\nThis plugin depends on a session created first via the [SSO](http://stash.corp.web:7990/projects/CMP/repos/cmp-plugin-sso/browse) plugin.\n\nWhen a request is made through CMP, where this plugin is enabled, a session is active, and a `courseKey` or `courseCgi` query parameter is present, a call to OLR will be made to populate the session data and inject the headers configured.\n\n## Properties\n\n| property       | type            | description                                                                                                                                                             |\n|----------------|-----------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `endpoint`      | `string`       | The HTTP endpoint used for REST calls to the OLR service.  This should just be the hostname with appropriate protocol. |\n| `headerPrefix`      | `string` | The prefix used at the beginning of every header key.  Defaults to `cengage-sso`. |\n| `mode`      | `string` | Defines how to act on a given request. `allow` will pass through any request regardless of authentication. `restrict` will simply throw a 401 if not authenticated. |\n| `mappings`      | `object` | Collection of types of mappings supported.  |\n| `mappings.authResponse`      | `object` | Key/Value pairs.  The key will be used to generate the header `${headerPrefix}-${key}`.  The value is used to pull the data from the OLR response. |\n| `mappings.requestParams`      | `array` | The key will be used to generate the header `cmp-dynamic-${key}`.  The value is pulled from the matching queryParam if it exists. |\n\n\n\n## Usage\n\n```\n{\n  \"plugins\":{\n    \"sso\":{\n      \"endpoint\":\"http://s-ws-i.cengage.com\",\n      \"login\":\"https://s-login.cengagebrain.com/cb/login.htm\",\n      \"mappings\":{\n        \"requestParams:[\n          \"eISBN\", \"titleIsbn\", \"courseKey\", \"ctx\", \"ILRN_CODE\", \"courseCgi\"\n        ],\n        \"authResponse\":{\n          \"guid\": \"data.entitlement.guid\",\n          \"role\": \"entitlementProduct.enrollmentType\",\n          \"cgi\": \"entitlementProduct.cgi\",\n          \"institution\": \"data.entitlement.institutionName\",\n          \"institution-id\": \"data.entitlement.cnowInstitutionId\"\n        }\n      }\n    }\n  }\n}\n```\n\n## authResponse\n\nTo help you understand how the `authResponse` mappings work, we build up an object containing the following values:\n\n```\n{\n  data: authData,\n  entitlementProduct: processedData\n}\n```\n\nIf there is an `eISBN` specified in the request, we will also create a `token` property on the above object:\n\n```\n{\n  data: authData,\n  entitlementProduct: processedData,\n  title: _.get(authData, 'entitlement.titles.title[processedData.titleKey]', {})\n}\n```\n\n`processedData` is the raw data sent back from the OLR service.  Using the raw data, as well as understanding of the above object, you should be able to create your own mappings within `authResponse`.\n\nKeep in mind, we do support pipes in the mappings, incase you want to have a fallback:\n\n```\n\"first-name\":\"user.givenName|user.firstName\"\n```\n\n\n## Example Working Policy\n\n```\n{\n  \"guid\": \"basic-sso-olr-policy\",\n  \"host\": \"localhost\",\n  \"plugins\": {\n    \"sso\": {\n      \"mode\": \"redirect\",\n      \"intended\": \"true\",\n      \"endpoint\": \"https://d-ws.cengage.com\",\n      \"login\": \"https://d-login.cengage.com/cb/login.htm\"\n    },\n    \"olr\": {\n      \"endpoint\": \"https://d-ws.cengage.com\"\n    }\n  },\n  \"paths\": {\n    \"/\": {\n      \"url\": \"http://eitstatic-server01.test.cengage.info:8080/echo\",\n      \"plugins\": {\n        \"sso\": {\n          \"mode\": \"allow\"\n        }\n      }\n    },\n    \"/api\": {\n      \"url\": \"http://eitstatic-server01.test.cengage.info:8080/echo\"\n    },\n    \"/homepage\": {\n      \"url\": \"http://eitstatic-server01.test.cengage.info:8080/echo\"\n    }\n  }\n}\n\n```\n\nWith this above policy, access to the `/homepage` endpoint will be redirected to login if no session is currently active.\n\nAccess to the `/api` endpoint will throw a 401 if no session is currently active.\n\nAccess to the `/` path and any other path not beginning with `/api` or `/homepage` will allow unauthenticated users through.",
  "readmeFilename": "README.md",
  "scripts": {
    "generate-docs": "jsdoc --configure .jsdoc.json --verbose",
    "lint": "eslint ./index.js ./test/**/*.js --max-warnings 0",
    "lint:fix": "eslint --fix ./index.js ./test/**/*.js",
    "test": "nyc --reporter=cobertura --reporter=html --reporter=text ./node_modules/mocha/bin/_mocha",
    "todo": "leasot **.*js ; exit 0"
  },
  "version": "1.3.4"
}
