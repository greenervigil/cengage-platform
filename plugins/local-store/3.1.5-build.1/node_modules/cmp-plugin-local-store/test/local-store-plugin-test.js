'use strict'

const expect = require('chai').expect
const sinon = require('sinon')
const Plugin = require('../index')
const config = {
  base: {
    sessionSecretKey: 'testKey',
    sessionAlgorithm: 'aes128'
  }
}
const jsonfile = require('jsonfile')
const file       = __dirname + '/../sessions.json'
let plugin

describe('Plugin', function() {
  beforeEach(() => {
    plugin = new Plugin(config)
  })

	it('should be able to write a session with a callback', () => {
		plugin.write({ sessionId: '123notauuid', session: { sso: { guid: '123notauuid' } } }, { 'key': 'value' }, () => {
			const sessions = jsonfile.readFileSync(file)
      expect(sessions['123notauuid'].to.eql({ 'key': 'value' }))
		})
	})

	it('should be able to write a session without a callback and then read it', () => {
		plugin.write('session-002', { 'key': 'value' })
		plugin.read('session-002', (session) => {
			expect(session.key).to.eql('value')
		})
	})

  it('should write to sessions with sso guid from cookie if it does not exist on the requests sso object', () => {
    const sessionCookie = {
      sso: {
        guid: 'my-guid'
      }
    }
    const req = request({
      getDecryptedSession : sinon.stub().returns(JSON.stringify(sessionCookie)),
      sessionId: 'some-cookie-that-gets-decrypted'
    })

    plugin.write(req, { 'key': 'value' })

    setTimeout(() => {
      const sessions = jsonfile.readFileSync(file)
      expect(sessions['my-guid']).to.eql({ 'key': 'value' })
    }, 0)
  })

	it('should handle returning a default session if there isn\'t one stored', () => {
		plugin.read('session-unmatched', (session) => {
			expect(JSON.stringify(session)).to.eql('{headers:{}}')
		})
	})

	it('should be able to get the sessionId from a cookie', () => {
		const req = request({ cookies: { 'cmp-session-id': 'cookie-session-id' } })
		const res = response()

		plugin.getSessionId(req, res)
		expect(req.sessionId).to.eql('cookie-session-id')
		// expect(res.cookies['cmp-session-id']).to.eql('cookie-session-id')
	})

	it('should have middleware create a new session if there isn\'t one on a request and generate a sessionCookie', () => {
		const req = request()
		const res = response()
		const next = sinon.spy()

		plugin.middleware()(req, res, next)

		expect(req.sessionId).to.not.be.undefined
		expect(res.cookies['cmp-session-id']).to.not.be.undefined
    expect(req.sessionCookie).to.be.eql({})
	})

	it('should properly encrypt and decrypt', () => {
		const req = request()
    const res = response()
    const next = sinon.spy()
    plugin.getSessionId = sinon.stub().returns(undefined)
    const unencryptedString = 'my string'

    plugin.middleware()(req, res, next)
    const encryptedString = req.getEncryptedSession(unencryptedString)

    expect(req.getDecryptedSession(encryptedString)).to.eql(unencryptedString)
	})
})

const request = (data = {}) => {
	return data
}

const response = () => {
	const cookies = {}

	return {
		cookie: (key, value) => {
			cookies[key] = value
		},
		cookies
	}
}
